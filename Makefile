# Compiler and flags
CXX = g++
CXXFLAGS = -Wall -pg -fprofile-arcs -ftest-coverage -O2 # Enable gprof and coverage
LDFLAGS = -lgcov --coverage -pg # Linking flags for gcov and gprof

# Targets
TARGET = my_program
OBJS = Graph.o main.o

all: $(TARGET)

# Linking the objects to create the final executable
$(TARGET): $(OBJS)
	$(CXX) $(LDFLAGS) -o $(TARGET) $(OBJS)

# Compile Graph.cpp
Graph.o: Graph.cpp Graph.hpp
	$(CXX) $(CXXFLAGS) -c Graph.cpp

# Compile main.cpp
main.o: main.cpp Graph.hpp
	$(CXX) $(CXXFLAGS) -c main.cpp

# Run the program with arguments
run: $(TARGET)
	./$(TARGET) -e 6 -v 4 -s 35

# Clean up the files generated by compilation, coverage, and profiling
clean:
	rm -f $(OBJS) $(TARGET) *.gcda *.gcno *.gcov gmon.out callgrind.out.* main.o tests

# Run code coverage with gcov
coverage: $(TARGET)
	./$(TARGET) -e 6 -v 4 -s 35
	./$(TARGET) -v 3 -e 3 -s 99
	./$(TARGET) -v 3 -e 534 -s 99
	./$(TARGET) -v 3 -e -1 -s 99
	./$(TARGET) -a 23
	gcov Graph.cpp main.cpp

# Run profiling with gprof
profile: $(TARGET)
	./$(TARGET) -e 12000 -v 20000 -s 8372
	gprof ./$(TARGET) gmon.out > analysis.txt
	cat analysis.txt


# Compile without profiling for Valgrind
valgrind_build: CXXFLAGS := $(filter-out -pg, $(CXXFLAGS))
valgrind_build: LDFLAGS := $(filter-out -pg, $(LDFLAGS))
valgrind_build: $(OBJS)
	$(CXX) $(LDFLAGS) -o $(TARGET) $(OBJS)

# Run memory check with Valgrind using the non-profiled build
memcheck: valgrind_build
	valgrind --tool=memcheck --leak-check=full --track-origins=yes ./$(TARGET) -e 6 -v 4 -s 1234 ./$(TARGET) -e 6 -v 4 -s 35 ./$(TARGET) -v 3 -e 3 -s 99 ./$(TARGET) -v 3 -e 534 -s 99 ./$(TARGET) -v 3 -e -1 -s 99 ./$(TARGET) -a 23 > memcheck_report.txt 2>&1

# Build for Callgrind (without -pg and gcov options)
callgrind_build: CXXFLAGS := $(filter-out -pg -fprofile-arcs -ftest-coverage, $(CXXFLAGS))
callgrind_build: LDFLAGS := $(filter-out -pg -lgcov, $(LDFLAGS))
callgrind_build: $(OBJS)
	$(CXX) $(LDFLAGS) -o $(TARGET) $(OBJS)

# Run Valgrind callgrind tool for call graph generation, filter out system libraries
callgraph: callgrind_build
	rm -f *.gcda # Remove gcda files before execution to avoid conflicts
	valgrind --tool=callgrind --separate-threads=yes --instr-atstart=yes --dump-instr=yes --verbose --callgrind-out-file=my_callgrind.out ./$(TARGET) -e 6 -v 4 -s 1234
	callgrind_annotate --inclusive=yes --auto=yes my_callgrind.out-01 > callgraph_filtered.txt
	cat callgraph_filtered.txt