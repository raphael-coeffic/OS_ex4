        -:    0:Source:main.cpp
        -:    1:#include "Graph.hpp"
        -:    2:#include <iostream>
        -:    3:#include <cstdlib>
        -:    4:#include <ctime>
        -:    5:#include <getopt.h>
        -:    6:
        -:    7:using namespace std;
        -:    8:
        -:    9:// Function to generate a random graph
        2:   10:void generateRandomGraph(Graph &g, int numVertices, int numEdges, unsigned int seed) {
        2:   11:    srand(seed);
        -:   12:    int u, v;
       11:   13:    for (int i = 0; i < numEdges; ++i) {
        -:   14:        do {
       23:   15:            u = rand() % numVertices;
       23:   16:            v = rand() % numVertices;
       23:   17:        } while (u == v || g.hasEdge(u, v)); // Avoid self-loops or duplicate edges
        9:   18:        g.addEdge(u, v);  // Add the edge to the graph
        -:   19:    }
        2:   20:}
        -:   21:
        5:   22:int main(int argc, char *argv[]) {
        -:   23:    int opt;
        -:   24:    int numVertices = 0;
        -:   25:    int numEdges = 0;
        5:   26:    unsigned int seed = time(0);  // Default random seed based on current time
        -:   27:
        -:   28:    // Use getopt to handle command-line arguments
       17:   29:    while ((opt = getopt(argc, argv, "v:e:s:")) != -1) {
       13:   30:        switch (opt) {
        4:   31:            case 'v':
        4:   32:                numVertices = atoi(optarg);  // Get number of vertices from arguments
        4:   33:                break;
        4:   34:            case 'e':
        4:   35:                numEdges = atoi(optarg);  // Get number of edges from arguments
        4:   36:                break;
        4:   37:            case 's':
        4:   38:                seed = atoi(optarg);  // Get seed from arguments
        4:   39:                break;
        1:   40:            default:
        1:   41:                cerr << "Usage: " << argv[0] << " -v numVertices -e numEdges [-s seed]\n";
        -:   42:                return 0;
        -:   43:        }
        -:   44:    }
        -:   45:
        -:   46:    // Parameter validation
        4:   47:    if (numVertices <= 0 || numEdges < 0 || numEdges > numVertices * (numVertices - 1) / 2) {
        2:   48:        cerr << "Invalid number of vertices or edges.\n";
        2:   49:        return 0;
        -:   50:    }
        -:   51:
        -:   52:    // Create a graph with the specified number of vertices
        2:   53:    Graph g(numVertices);
        -:   54:
        -:   55:    // Generate a random graph
        2:   56:    generateRandomGraph(g, numVertices, numEdges, seed);
        -:   57:
        -:   58:    // Display the generated graph
        2:   59:    cout << "Generated Graph:\n";
        2:   60:    g.printGraph();
        -:   61:
        -:   62:    // Run the Eulerian cycle algorithm
        2:   63:    g.printEulerianCycle();
        -:   64:
        -:   65:    return 0;
        -:   66:}
